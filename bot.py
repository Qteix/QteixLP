import vkquick as vq
import time
import typing
from config import access_token

app = vq.App(prefixes=['.–ª '],filter=vq.filters.OnlyMe())




@app.command("–ø–∏–Ω–≥", "ping")
async def greeting(ctx: vq.NewMessage):
    delta = abs(round(time.time() - ctx.msg.date.timestamp(), 2))
    await ctx.edit(f"üü¢ | QteixLP version 1.0\n___________________________\nüí°–û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ {delta if delta > 0 else 0.0}—Å.")






@app.command("—Å—Ç–∞—Ç—É—Å")
async def delta(ctx: vq.NewMessage, user: vq.User):
    status = await ctx.api.status.get(user_id=user.id)
    await ctx.edit(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user:@[fullname]}: {status['text']}")





@app.command("+–¥—Ä")
async def friend(ctx: vq.NewMessage, user: vq.User):
    try:
        method = await ctx.api.friends.add(user_id=user.id)
        await ctx.edit ("‚úÖ–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...")
    except vq.APIError[vq.CODE_174_FRIENDS_ADD_YOURSELF]:
        await ctx.edit ( "‚ùå–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
    if method == 1:
        await ctx.edit( f"‚úÖ–ó–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user:@[fullname]} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    elif method == 2:
        await ctx.edit(  f"‚úÖ–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è –æ—Ç {user:@[fullname]} –æ–¥–æ–±—Ä–µ–Ω–∞.")
    elif method == 4:
        await ctx.edit( "‚ùå–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏.")



@app.command("-–¥—Ä")
async def friend(ctx: vq.NewMessage, user: vq.User):
    method = await ctx.api.friends.delete(user_id=user.id)
    method1 = method['success']
    await ctx.edit( "‚úÖ–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
    if method1 == 1:
        await ctx.edit(f"‚úÖ {user:@[fullname]} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π.")
    elif method1 == 1:
        await ctx.edit(f"‚úÖ–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è {user:@[fullname]} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    elif method1 == 3:
        await ctx.edit(f"‚úÖ–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è {user:@[fullname]} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

@app.command("–¥–∞—Ç–∞")
async def resolve_user(user: vq.User):
    registration_date = await vq.get_user_registration_date(user.id)
    formatted_date = registration_date.strftime("%d.%m.%Y")
    return f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user:@[fullname]}: {formatted_date}"

@app.command("+–ª–∞–π–∫")
async def add_like_the_user_profile(ctx: vq.NewMessage, user: vq.User[typing.Literal["photo_id"]]):
    photo_id = user.fields["photo_id"].split("_")[1]
    photo_id1 = await ctx.api.method(
        "likes.add", type="photo", owner_id=user.id, item_id=photo_id
    )
    await ctx.edit( f"‚úÖ–õ–∞–π–∫ –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user:@[fullname]} –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°—Ç–∞–ª–æ –ª–∞–π–∫–æ–≤ : {photo_id1['likes']}.")

@app.command("-–ª–∞–π–∫")
async def add_like_the_user_profile(ctx: vq.NewMessage, user: vq.User[typing.Literal["photo_id"]]):
    photo_id = user.fields["photo_id"].split("_")[1]
    photo_id1 = await ctx.api.method(
        "likes.delete", type="photo", owner_id=user.id, item_id=photo_id
    )
    await ctx.edit( f"‚úÖ–õ–∞–π–∫ –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user:@[fullname]} —É–±—Ä–∞–Ω! –°—Ç–∞–ª–æ –ª–∞–π–∫–æ–≤ : {photo_id1['likes']}.")

@app.command("–∏–¥")
async def revolve_user(user: vq.User):
    user_id = (user.id)
    return f"–ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.fullname}: —Ä–∞–≤–µ–Ω {user_id}"


@app.command("–≤–ª—Å")
async def send_message(ctx: vq.NewMessage, user: vq.User, * , text: str,):
    await ctx.api.messages.send(
        user_id=user.id,
        random_id=0,
        message=text
    )
    await ctx.edit(f"‚úÖ–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º {text}: –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user:@[fullname]}")


@app.command("–∫–∏–∫")
async def chat(ctx: vq.NewMessage, user: vq.User):
    try:
        method = await ctx.api.messages.removeChatUser(chat_id=ctx.msg.chat_id, user_id=user.id)
        await ctx.edit( "‚úÖ–ò—Å–∫–ª—é—á–µ–Ω–∏–µ")
        if method == 1:
            await ctx.edit( f"‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user:@[fullname]} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –±–µ—Å–µ–¥—ã.")
    except vq.APIError[vq.CODE_925_MESSAGES_CHAT_NOT_ADMIN]:
        await ctx.edit( "‚ö†–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    except vq.APIError[vq.CODE_935_MESSAGES_CHAT_USER_NOT_IN_CHAT]:
        await ctx.edit( "‚ö†–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –≤ –±–µ—Å–µ–¥–µ.")
    except vq.APIError[vq.CODE_945_MESSAGES_CHAT_DISABLED]:
        await ctx.edit( "‚ö†MESSAGES_CHAT_DISABLED")
    except vq.APIError[vq.CODE_946_MESSAGES_CHAT_UNSUPPORTED]:
        await ctx.edit( "‚ö†MESSAGES_CHAT_UNSUPPORTED")
    except vq.APIError[vq.CODE_15_ACCESS]:
        await ctx.edit( "‚ö†–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@app.command("–¥–æ–±–∞–≤–∏—Ç—å")
async def chat(ctx: vq.NewMessage , user: vq.User):
    try:
        await ctx.api.messages.addChatUser(
            chat_id=ctx.msg.chat_id,
            user_id=user.id
        )
        await ctx.edit(f'‚úÖ–î–æ–±–∞–≤–ª—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user:@[fullname]}')
        if method == 1:
            await ctx.edit(f'‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user:@[fullname]} –¥–æ–±–∞–≤–ª–µ–Ω.')
    except vq.APIError[vq.CODE_925_MESSAGES_CHAT_NOT_ADMIN]:
        await ctx.edit("‚ö†You are not admin of this chat")
    except vq.APIError[vq.CODE_932_MESSAGES_GROUP_PEER_ACCESS]:
        await ctx.edit("‚ö†Your community can't interact with this peer")
    except vq.APIError[vq.CODE_947_MESSAGES_MEMBER_ACCESS_TO_GROUP_DENIED]:
        await ctx.edit("‚ö†Can't add user to chat, because user has no access to group")
    except vq.APIError[vq.CODE_15_ACCESS]:
        await ctx.edit("‚ö†Access denied: can't add this user")

@app.command("—á–∞—Ç")
async def chat_info(ctx: vq.NewMessage):
    chat_info = await ctx.api.messages.getChat(
        chat_id=ctx.msg.chat_id
    )
    return f"–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ {chat_info['title']}: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {chat_info['members_count']} "





app.run(*access_token)
